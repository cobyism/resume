!!!
%html{:lang => "en"}
	%head
		%meta{:charset => "utf-8"}/
		%title Bootstrap, from Twitter
		%meta{:content => "", :name => "description"}/
		%meta{:content => "", :name => "author"}/
		%link{:rel => "stylesheet", :href => "css/style.css"}/
	%body
		/
			Topbar
			\==================================================
		.topbar{"data-scrollspy" => "scrollspy"}
			.topbar-inner
				.container
					%a.brand{:href => "#"} Bootstrap
					%ul.nav
						%li.active
							%a{:href => "#overview"} Overview
						%li
							%a{:href => "#about"} About
						%li
							%a{:href => "#grid-system"} Grid
						%li
							%a{:href => "#layouts"} Layouts
						%li
							%a{:href => "#typography"} Type
						%li
							%a{:href => "#media"} Media
						%li
							%a{:href => "#tables"} Tables
						%li
							%a{:href => "#forms"} Forms
						%li
							%a{:href => "#navigation"} Navigation
						%li
							%a{:href => "#alerts"} Alerts
						%li
							%a{:href => "#popovers"} Popovers
						%li
							%a{:href => "#javascript"} Javascript
						%li
							%a{:href => "#less"} Less
		/
			Masthead (blueprinty thing)
			\==================================================
		%header#overview.jumbotron.masthead
		.inner
			.container
				%h1 Bootstrap, from Twitter
				%p.lead
					Bootstrap is a toolkit from Twitter designed to kickstart development of webapps and sites.
					%br/
					It includes base CSS and HTML for typography, forms, buttons, tables, grids, navigation, and more.
					%br/
				%p
					%strong Nerd alert:
					Bootstrap is
					%a{:href => "#less", :title => "Read about using Bootstrap with Less"} built with Less
					and was designed to work out of the gate with modern browsers in mind.
			/ /container
		/
			Quickstart options
			\==================================================
		.quickstart
			.container
				.row
					.span5
						%h6 Hotlink the CSS
						%p For the quickest and easiest start, just copy this snippet into your webpage.
						%form
							%textarea.copy-code{:rows => "1"} &lt;link rel="stylesheet" href="http://twitter.github.com/bootstrap/assets/css/bootstrap.min.css">
					.span5
						%h6 Use it with Less
						%p A fan of using Less? No problem, just clone the repo and add these lines:
						%form
							%textarea.copy-code{:rows => "2"}
								:preserve
									&lt;link rel="stylesheet/less" href="/path/to/bootstrap.less"&gt;
									&lt;script src="/path/to/less.js"&gt;&lt;/script&gt;					.span5
						%h6 Fork on GitHub
						%p Download, fork, pull, file issues, and more with the official Bootstrap repo on Github.
						%p
							%a.btn.primary{:href => "https://github.com/twitter/bootstrap", :target => "_blank"} Bootstrap on GitHub &raquo;
						%p.current-version
							Currently
							%a{:href => "https://github.com/twitter/bootstrap/wiki/Changelog"} v1.4.0
				/ /row
		.container
			/
				About Bootstrap
				\==================================================
			%section#about
			.page-header
				%h1
					About Bootstrap
					%small Brief history, browser support, and more
			.row
				.span-one-third
					%h3 History
					%p Engineers at Twitter have historically used almost any library they were familiar with to meet front-end requirements. Bootstrap began as an answer to the challenges that presented. With the help of many awesome folks, Bootstrap has grown significantly.
					%p
						Read more on
						%a{:href => "https://dev.twitter.com/blog/bootstrap-twitter"} dev.twitter.com &rsaquo;
					%p
						%a.twitter-follow-button{:href => "http://twitter.com/twbootstrap"} Follow @twbootstrap
						%script{:src => "http://platform.twitter.com/widgets.js", :type => "text/javascript"}
				.span-one-third
					%h3 Browser support
					%p Bootstrap is tested and supported in major modern browsers like Chrome, Safari, Internet Explorer, and Firefox.
					%img{:alt => "Tested and supported in Chrome, Safari, Internet Explorer, and Firefox", :src => "assets/img/browsers.png"}/
					%ul
						%li Latest Safari
						%li Latest Google Chrome
						%li Firefox 4+
						%li Internet Explorer 7+
						%li Opera 11
				.span-one-third
					%h3 What's included
					%p Bootstrap comes complete with compiled CSS, uncompiled, and example templates.
					%ul
						%li
							%a{:href => "./javascript.html"} Javascript plugins
						%li All original .less files
						%li
							Fully
							%a{:href => "../bootstrap.css"} compiled
							and
							%a{:href => "../bootstrap.min.css"} minified
							CSS
						%li Complete styleguide documentation
						%li Three example pages with different layouts
			/ /row
			.row
				.span12
					%h3 Quick-start examples
					%p Need some quick templates? Check out these basic examples we've put together:
					%ul.media-grid
						%li
							%a{:href => "../examples/hero.html"}
								%img{:alt => "Simple three-column layout with hero unit", :src => "assets/img/example-diagram-01.png"}/
						%li
							%a{:href => "../examples/fluid.html"}
								%img{:alt => "Fluid layout with static sidebar", :src => "assets/img/example-diagram-02.png"}/
						%li
							%a{:href => "../examples/container-app.html"}
								%img{:alt => "Simple hanging container for apps", :src => "assets/img/example-diagram-03.png"}/
			/ /row
			/
				Grid system
				\==================================================
			%section#grid-system
			.page-header
				%h1
					Grid system
					%small Rock the standard 940px or roll your own
			.row
				.span4
					%h2 Default grid
					%p The default grid system provided as part of Bootstrap is a 940px wide 16-column grid. Itâ€™s a flavor of the popular 960 grid system, but without the additional margin/padding on the left and right sides.
				.span12
					%h3 Example grid markup
					%p As shown here, a basic layout can be created with two "columns," each spanning a number of the 16 foundational columns we defined as part of our grid system. See the examples below for more variations.
				 
			/ /row
			.row.show-grid{:title => "16 column layout"}
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
				.span1 1
			/ /row
			.row.show-grid{:title => "8 column layout"}
				.span2 2
				.span2 2
				.span2 2
				.span2 2
				.span2 2
				.span2 2
				.span2 2
				.span2 2
			/ /row
			.row.show-grid{:title => "Example uncommon layout"}
				.span3 3
				.span3 3
				.span3 3
				.span3 3
				.span3 3
				.span1.column 1
			/ /row
			.row.show-grid{:title => "Four column layout"}
				.span4 4
				.span4 4
				.span4 4
				.span4 4
			/ /row
			.row.show-grid{:title => "Default three column layout"}
				.span-one-third 1/3
				.span-one-third 1/3
				.span-one-third 1/3
			/ /row
			.row.show-grid{:title => "One-third and two-thirds layout"}
				.span-one-third 1/3
				.span-two-thirds 2/3
			/ /row
			.row.show-grid{:title => "Irregular three column layout"}
				.span4 4
				.span6 6
				.span6 6
			/ /row
			.row.show-grid{:title => "Half and half"}
				.span8 8
				.span8 8
			/ /row
			.row.show-grid{:title => "Example uncommon two-column layout"}
				.span5 5
				.span11 11
			/ /row
			.row.show-grid{:title => "Unnecessary single column layout"}
				.span16 16
			/ /row
			%br/
			%h2 Offsetting columns
			.row.show-grid
				.span4 4
				.span8.offset4 8 offset 4
			/ /row
			.row.show-grid
				.span-one-third.offset-two-thirds 1/3 offset 2/3s
			/ /row
			.row.show-grid
				.span4.offset4 4 offset 4
				.span4.offset4 4 offset 4
			/ /row
			.row.show-grid
				.span5.offset3 5 offset 3
				.span5.offset3 5 offset 3
			/ /row
			.row.show-grid
				.span10.offset6 10 offset 6
			/ /row
			%br/
			.row
				.span4
					%h2 Nesting columns
					%p
						Nest your content if you must by creating a
						%code .row
						within an existing column.
				.span12
					%h4 Example of nested columns
					.row.show-grid
						.span12
							Level 1 of column
							.row.show-grid
								.span6
									Level 2
								.span6
									Level 2
			%br/
			.row
				.span4
					%h2 Roll your own grid
					%p Built into Bootstrap are a handful of variables for customizing the default 940px grid system. With a bit of customization, you can modify the size of columns, their gutters, and the container they reside in.
				.span12
					%h3 Inside the grid
					%p
						The variables needed to modify the grid system currently all reside in
						= succeed "." do
							%code variables.less
					%table.bordered-table.zebra-striped
						%thead
							%tr
								%th Variable
								%th Default value
								%th Description
						%tbody
							%tr
								%td
									%code @gridColumns
								%td 16
								%td The number of columns within the grid
							%tr
								%td
									%code @gridColumnWidth
								%td 40px
								%td The width of each column within the grid
							%tr
								%td
									%code @gridGutterWidth
								%td 20px
								%td The negative space between each column
							%tr
								%td
									%code @siteWidth
								%td
									%em Computed sum of all columns and gutters
								%td
									We use some basic match to count the number of columns and gutters and set the width of the
									%code .fixed-container()
									mixin.
					%h3 Now to customize
					%p
						Modifying the grid means changing the three
						%code @grid-*
						variables and recompiling the Less files.
					%p Bootstrap comes equipped to handle a grid system with up to 24 columns; the default is just 16. Here's how your grid variables would look customized to a 24-column grid.
					%p Once recompiled, you'll be set!
			/
				Layouts (Default and fluid)
				\==================================================
			%section#layouts
			.page-header
				%h1
					Layouts
					%small Basic templates to create webpages
			.row
				.span8
					%h2 Fixed layout
					%p
						The default and simple 940px-wide, centered layout for just about any website or page provided by a single
						= succeed "." do
							%code &lt;div.container&gt;
					.mini-layout
						.mini-layout-body
				/ /col
				.span8
					%h2 Fluid layout
					%p An alternative, flexible fluid page structure with min- and max-widths and a left-hand sidebar. Great for apps and docs.
					.mini-layout.fluid
						.mini-layout-sidebar
						.mini-layout-body
				/ /col
			/ /row
			/
				Typography
				\==================================================
			%section#typography
			.page-header
				%h1
					Typography
					%small Headings, paragraphs, lists, and other inline type elements
			/ Headings &amp; Paragraph Copy
			.row
				.span4
					%h2 Headings &amp; copy
					%p A standard typographic hierarchy for structuring your webpages.
					%p
						The entire typographic grid is based on two Less variables in our variables.less file:
						%code @basefont
						and
						= succeed "." do
							%code @baseline
						The first is the base font-size used throughout and the second is the base line-height.
					%p We use those variables, and some math, to create the margins, paddings, and line-heights of all our type and more.
				.span4
					%h1 h1. Heading 1
					%h2 h2. Heading 2
					%h3 h3. Heading 3
					%h4 h4. Heading 4
					%h5 h5. Heading 5
					%h6 h6. Heading 6
				.span8
					%h3 Example paragraph
					%p Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula ut id elit.
					%h1
						Example heading
						%small Has sub-heading&hellip;
			/ Misc Elements
			.row
				.span4
					%h2 Misc. elements
					%p Using emphasis, addresses, &amp; abbreviations
					%p
						%code &lt;strong&gt;
						%code &lt;em&gt;
						%code &lt;address&gt;
						%code &lt;abbr&gt;
				.span12
					%h3 When to use
					%p
						Emphasis tags (
						%code &lt;strong&gt;
						and
						= succeed ")" do
							%code &lt;em&gt;
						should be used to indicate additional importance or emphasis of a word or phrase relative to its surrounding copy. Use
						%code &lt;strong&gt;
						for importance and
						%code &lt;em&gt;
						for
						%em stress
						emphasis.
					%h3 Emphasis in a paragraph
					%p
						%a{:href => "#"}> Fusce dapibus
						,
						= succeed "," do
							%strong tellus ac cursus commodo
						= succeed "," do
							%em tortor mauris condimentum nibh
						ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Nulla vitae elit libero, a pharetra augue.
					%p
						%strong Note:
						It's still okay to use
						%code &lt;b&gt;
						and
						%code &lt;i&gt;
						tags in HTML5 and they don't have to be styled bold and italic, respectively (although if there is a more semantic element, use it).
						%code &lt;b&gt;
						is meant to highlight words or phrases without conveying additional importance, while
						%code &lt;i&gt;
						is mostly for voice, technical terms, etc.
					%h3 Addresses
					%p
						The
						%code &lt;address&gt;
						element is used for contact information for its nearest ancestor, or the entire body of work. Here are two examples of how it could be used:
					.row
						.span4
							%address
								%strong Twitter, Inc.
								%br/
								795 Folsom Ave, Suite 600
								%br/
								San Francisco, CA 94107
								%br/
								%abbr{:title => "Phone"} P:
								(123) 456-7890
						.span4
							%address
								%strong Full Name
								%br/
								%a{:mailto => ""} first.last@gmail.com
					%p
						%strong Note:
						Each line in an
						%code &lt;address&gt;
						must end with a line-break (
						%code> &lt;br /&gt;
						) or be wrapped in a block-level tag (e.g.,
						= succeed ")" do
							%code &lt;p&gt;
						to properly structure the content.
					%h3 Abbreviations
					%p
						For abbreviations and acronyms, use the
						%code &lt;abbr&gt;
						tag (
						%code &lt;acronym&gt;
						is deprecated in
						= succeed ")." do
							%abbr{:title => "HyperText Markup Langugage 5"} HTML5
						Put the shorthand form within the tag and set a title for the complete name.
			/ /row
			/ Blockquotes
			.row
				.span4
					%h2 Blockquotes
					%p
						%code &lt;blockquote&gt;
						%code &lt;p&gt;
						%code &lt;small&gt;
				.span12
					%h3 How to quote
					%p
						To include a blockquote, wrap
						%code &lt;blockquote&gt;
						around
						%code &lt;p&gt;
						and
						%code &lt;small&gt;
						tags. Use the
						%code &lt;small&gt;
						element to cite your source and you'll get an em dash
						%code &amp;mdash;
						before it.
					%blockquote
						%p Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet.
						%small Dr. Julius Hibbert
			/ /row
			%h2 Lists
			.row
				.span4
					%h4
						Unordered
						%code &lt;ul&gt;
					%ul
						%li Lorem ipsum dolor sit amet
						%li Consectetur adipiscing elit
						%li Integer molestie lorem at massa
						%li Facilisis in pretium nisl aliquet
						%li
							Nulla volutpat aliquam velit
							%ul
								%li Phasellus iaculis neque
								%li Purus sodales ultricies
								%li Vestibulum laoreet porttitor sem
								%li Ac tristique libero volutpat at
						%li Faucibus porta lacus fringilla vel
						%li Aenean sit amet erat nunc
						%li Eget porttitor lorem
				.span4
					%h4
						Unstyled
						%code &lt;ul.unstyled&gt;
					%ul.unstyled
						%li Lorem ipsum dolor sit amet
						%li Consectetur adipiscing elit
						%li Integer molestie lorem at massa
						%li Facilisis in pretium nisl aliquet
						%li
							Nulla volutpat aliquam velit
							%ul
								%li Phasellus iaculis neque
								%li Purus sodales ultricies
								%li Vestibulum laoreet porttitor sem
								%li Ac tristique libero volutpat at
						%li Faucibus porta lacus fringilla vel
						%li Aenean sit amet erat nunc
						%li Eget porttitor lorem
				.span4
					%h4
						Ordered
						%code &lt;ol&gt;
					%ol
						%li Lorem ipsum dolor sit amet
						%li Consectetur adipiscing elit
						%li Integer molestie lorem at massa
						%li Facilisis in pretium nisl aliquet
						%li Nulla volutpat aliquam velit
						%li Faucibus porta lacus fringilla vel
						%li Aenean sit amet erat nunc
						%li Eget porttitor lorem
				.span4
					%h4
						Description
						%code dl
					%dl
						%dt Description lists
						%dd A description list is perfect for defining terms.
						%dt Euismod
						%dd Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.
						%dd Donec id elit non mi porta gravida at eget metus.
						%dt Malesuada porta
						%dd Etiam porta sem malesuada magna mollis euismod.
			/ /row
			/ Code
			.row
				.span4
					%h2 Code
					%p
						%code &lt;code&gt;
						%code &lt;pre&gt;
					%p Pimp your code in style with two simple tags. For even more awesomeness through javascript, drop in Google's code prettify library and you're set.
				.span12
					%h3 Presenting code
					%p
						Code, blocks of or just snippets inline, can be displayed with style just by wrapping in the right tag. For blocks of code spanning multiple lines, use the
						%code &lt;pre&gt;
						element. For inline code, use the
						%code &lt;code&gt;
						element.
					%table.bordered-table.zebra-striped
						%thead
							%tr
								%th{:style => "width: 190px;"} Element
								%th Result
						%tbody
							%tr
								%td
									%code &lt;code&gt;
								%td
									In a line of text like this, your wrapped code will look like this
									%code &lt;html&gt;
									element.
							%tr
								%td
									%code &lt;pre&gt;
								%td
									%pre
										:preserve
											&lt;div&gt;
												&lt;h1&gt;Heading&lt;/h1&gt;
												&lt;p&gt;Something right here...&lt;/p&gt;
											&lt;/div&gt;									%p
										%strong Note:
										Be sure to keep code within
										%code &lt;pre&gt;
										tags as close to the left as possible; it will render all tabs.
							%tr
								%td
									%code &lt;pre class="prettyprint"&gt;
								%td
									%p Using the google-code-prettify library, your blocks of code get a slightly different visual style and automatic syntax highlighting.
									%p
										%a{:href => "http://code.google.com/p/google-code-prettify/"} Download google-code-prettify
										and view the readme for
										= succeed "." do
											%a{:href => "http://google-code-prettify.googlecode.com/svn/trunk/README.html"} how to use
			/ /row
			/ Labels
			.row
				.span4
					%h2 Inline labels
					%p
						%code &lt;span class="label"&gt;
					%p Call attention to or flag any phrase in your body text.
				.span12
					%h3 Label anything
					%p
						Ever needed one of those fancy
						%span.label.success New!
						or
						%span.label.important Important
						flags when writing code? Well, now you have them. Here's what's included by default:
					%table.bordered-table.zebra-striped
						%thead
							%tr
								%th{:style => "width: 50%;"} Label
								%th Result
						%tbody
							%tr
								%td
									%code &lt;span class="label"&gt;Default&lt;/span&gt;
								%td
									%span.label Default
							%tr
								%td
									%code &lt;span class="label success"&gt;New&lt;/span&gt;
								%td
									%span.label.success New
							%tr
								%td
									%code &lt;span class="label warning"&gt;Warning&lt;/span&gt;
								%td
									%span.label.warning Warning
							%tr
								%td
									%code &lt;span class="label important"&gt;Important&lt;/span&gt;
								%td
									%span.label.important Important
							%tr
								%td
									%code &lt;span class="label notice"&gt;Notice&lt;/span&gt;
								%td
									%span.label.notice Notice
			/ /row
			/
				Media
				\==================================================
			%section#media
			.page-header
				%h1
					Media
					%small Displaying images and videos
			/ Table structure
			.row
				.span4
					%h2 Media grid
					%p Display thumbnails of varying sizes on pages with a low HTML footprint and minimal styles.
				.span12
					%h3 Example thumbnails
					%p
						Thumbnails in the
						%code .media-grid
						can be any size, but they work best when mapped directly to the built-in Bootstrap grid system. Image widths like 90, 210, and 330 combine with a few pixels of padding to equal the
						= succeed "," do
							%code .span2
						= succeed "," do
							%code .span4
						and
						%code .span6
						column sizes.
					%h4 Large
					%ul.media-grid
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/330x230"}/
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/330x230"}/
					%h4 Medium
					%ul.media-grid
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/210x150"}/
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/210x150"}/
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/210x150"}/
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/210x150"}/
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/210x150"}/
					%h4 Small
					%ul.media-grid
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/90x90"}/
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/90x90"}/
						%li
							%a{:href => "#"}
								%img.thumbnail{:alt => "", :src => "http://placehold.it/90x90"}/
					%h4 Coding them
					%p Media grids are easy to use and rather simple on the markup side. Their dimensions are purely based on the size of the images included.
			/ /row
			/
				Tables
				\==================================================
			%section#tables
			.page-header
				%h1
					Tables
					%small For, you guessed it, tabular data
			/ Table structure
			.row
				.span4
					%h2 Building tables
					%p
						%code &lt;table&gt;
						%code &lt;thead&gt;
						%code &lt;tbody&gt;
						%code &lt;tr&gt;
						%code &lt;th&gt;
						%code &lt;td&gt;
						%code &lt;colspan&gt;
						%code &lt;caption&gt;
					%p Tables are great&mdash;for a lot of things. Great tables, however, need a bit of markup love to be useful, scalable, and readable (at the code level). Here are a few tips to help.
					%p
						Always wrap your column headers in a
						%code &lt;thead&gt;
						such that hierarchy is
						%code &lt;thead&gt;
						>
						%code &lt;tr&gt;
						>
						= succeed "." do
							%code &lt;th&gt;
					%p
						Similar to the column headers, all your tableâ€™s body content should be wrapped in a
						%code &lt;tbody&gt;
						so your hierarchy is
						%code &lt;tbody&gt;
						>
						%code &lt;tr&gt;
						>
						= succeed "." do
							%code &lt;td&gt;
				.span12
					%h3 Example: Default table styles
					%p All tables will be automatically styled with only the essential borders to ensure readability and maintain structure. No need to add extra classes or attributes.
					%table
						%thead
							%tr
								%th #
								%th First Name
								%th Last Name
								%th Language
						%tbody
							%tr
								%td 1
								%td Some
								%td One
								%td English
							%tr
								%td 2
								%td Joe
								%td Sixpack
								%td English
							%tr
								%td 3
								%td Stu
								%td Dent
								%td Code
					%h3 Example: Condensed table
					%p For tables that require more data in tighter spaces, use the condensed flavor that cuts padding in half. It can also be used in conjunction with borders and zebra-stripes, just like the default table styles.
					%table.condensed-table
						%thead
							%tr
								%th #
								%th First Name
								%th Last Name
								%th Language
						%tbody
							%tr
								%th 1
								%td Some
								%td One
								%td English
							%tr
								%th 2
								%td Joe
								%td Sixpack
								%td English
							%tr
								%th 3
								%td Stu
								%td Dent
								%td Code
					%h3 Example: Bordered table
					%p Make your tables look just a wee bit sleeker by rounding their corners and adding borders on all sides.
					%table.bordered-table
						%thead
							%tr
								%th #
								%th First Name
								%th Last Name
								%th Language
						%tbody
							%tr
								%th 1
								%td Some
								%td One
								%td English
							%tr
								%th 2
								%td Joe
								%td Sixpack
								%td English
							%tr
								%th 3
								%td Stu
								%td Dent
								%td Code
					%h3 Example: Zebra-striped
					%p
						Get a little fancy with your tables by adding zebra-striping&mdash;just add the
						%code .zebra-striped
						class.
					%table.bordered-table.zebra-striped
						%thead
							%tr
								%th #
								%th First Name
								%th Last Name
								%th Language
						%tbody
							%tr
								%td 1
								%td Some
								%td One
								%td English
							%tr
								%td 2
								%td Joe
								%td Sixpack
								%td English
							%tr
								%td 3
								%td Stu
								%td Dent
								%td Code
							%tr
								%td{:colspan => "4"}
									span 4 columns
							%tr
								%td{:colspan => "2"}
									span 2 columns
								%td{:colspan => "2"}
									span 2 columns
					%p
						%strong Note:
						Zebra-striping is a progressive enhancement not available for older browsers like IE8 and below.
					%h3 Example: Zebra-striped w/ TableSorter.js
					%p
						Taking the previous example, we improve the usefulness of our tables by providing sorting functionality via
						%a{:href => "http://jquery.com"} jQuery
						and the
						%a{:href => "http://tablesorter.com/docs/"} Tablesorter
						plugin.
						%strong Click any columnâ€™s header to change the sort.
					%table#sortTableExample.zebra-striped
						%thead
							%tr
								%th #
								%th.yellow First Name
								%th.blue Last Name
								%th.green Language
						%tbody
							%tr
								%td 1
								%td Your
								%td One
								%td English
							%tr
								%td 2
								%td Joe
								%td Sixpack
								%td English
							%tr
								%td 3
								%td Stu
								%td Dent
								%td Code
			/
				Forms
				\==================================================
			%section#forms
			.page-header
				%h1 Forms
			.row
				.span4
					%h2 Default styles
					%p All forms are given default styles to present them in a readable and scalable way. Styles are provided for text inputs, select lists, textareas, radio buttons and checkboxes, and buttons.
				.span12
					%form
						%fieldset
							%legend Example form legend
							.clearfix
								%label{:for => "xlInput"} X-Large input
								.input
									%input#xlInput.xlarge{:name => "xlInput", :size => "30", :type => "text"}/
							/ /clearfix
							.clearfix
								%label{:for => "normalSelect"} Select
								.input
									%select#normalSelect{:name => "normalSelect"}
										%option 1
										%option 2
										%option 3
										%option 4
										%option 5
							/ /clearfix
							.clearfix
								%label{:for => "mediumSelect"} Select
								.input
									%select#mediumSelect.medium{:name => "mediumSelect"}
										%option 1
										%option 2
										%option 3
										%option 4
										%option 5
							/ /clearfix
							.clearfix
								%label{:for => "multiSelect"} Multiple select
								.input
									%select#multiSelect.medium{:multiple => "multiple", :name => "multiSelect", :size => "5"}
										%option 1
										%option 2
										%option 3
										%option 4
										%option 5
							/ /clearfix
							.clearfix
								%label Uneditable input
								.input
									%span.uneditable-input Some value here
							/ /clearfix
							.clearfix
								%label{:for => "disabledInput"} Disabled input
								.input
									%input#disabledInput.xlarge.disabled{:disabled => "", :name => "disabledInput", :placeholder => "Disabled input hereâ€¦ carry on.", :size => "30", :type => "text"}/
							/ /clearfix
							.clearfix
								%label{:for => "disabledInput"} Disabled textarea
								.input
									%textarea#textarea.xxlarge{:disabled => "", :name => "textarea", :rows => "3"}
							/ /clearfix
							.clearfix.error
								%label{:for => "errorInput"} Input with error
								.input
									%input#errorInput.xlarge.error{:name => "errorInput", :size => "30", :type => "text"}/
									%span.help-inline Small snippet of help text
							/ /clearfix
							.clearfix.success
								%label{:for => "successInput"} Input with success
								.input
									%input#successInput.xlarge.error{:name => "successInput", :size => "30", :type => "text"}/
									%span.help-inline Success!
							/ /clearfix
							.clearfix.warning
								%label{:for => "warningInput"} Input with warning
								.input
									%input#warningInput.xlarge.error{:name => "warningInput", :size => "30", :type => "text"}/
									%span.help-inline Ruh roh!
							/ /clearfix
						%fieldset
							%legend Example form legend
							.clearfix
								%label{:for => "prependedInput"} Prepended text
								.input
									.input-prepend
										%span.add-on @
										%input#prependedInput.medium{:name => "prependedInput", :size => "16", :type => "text"}/
									%span.help-block Here's some help text
							/ /clearfix
							.clearfix
								%label{:for => "prependedInput2"} Prepended checkbox
								.input
									.input-prepend
										%label.add-on
											%input{:id => "", :name => "", :type => "checkbox", :value => ""}/
										%input#prependedInput2.mini{:name => "prependedInput2", :size => "16", :type => "text"}/
							/ /clearfix
							.clearfix
								%label{:for => "appendedInput"} Appended checkbox
								.input
									.input-append
										%input#appendedInput.mini{:name => "appendedInput", :size => "16", :type => "text"}/
										%label.add-on.active
											%input{:checked => "checked", :id => "", :name => "", :type => "checkbox", :value => ""}/
							/ /clearfix
							.clearfix
								%label{:for => "fileInput"} File input
								.input
									%input#fileInput.input-file{:name => "fileInput", :type => "file"}/
							/ /clearfix
						%fieldset
							%legend Example form legend
							.clearfix
								%label#optionsCheckboxes List of options
								.input
									%ul.inputs-list
										%li
											%label
												%input{:name => "optionsCheckboxes", :type => "checkbox", :value => "option1"}/
												%span Option one is this and that&mdash;be sure to include why itâ€™s great
										%li
											%label
												%input{:name => "optionsCheckboxes", :type => "checkbox", :value => "option2"}/
												%span Option two can also be checked and included in form results
										%li
											%label
												%input{:name => "optionsCheckboxes", :type => "checkbox", :value => "option2"}/
												%span Option three can&mdash;yes, you guessed it&mdash;also be checked and included in form results. Let's make it super long so that everyone can see how it wraps, too.
										%li
											%label.disabled
												%input{:disabled => "", :name => "optionsCheckboxes", :type => "checkbox", :value => "option2"}/
												%span Option four cannot be checked as it is disabled.
									%span.help-block
										%strong Note:
										Labels surround all the options for much larger click areas and a more usable form.
							/ /clearfix
							.clearfix
								%label Date range
								.input
									.inline-inputs
										%input.small{:type => "text", :value => "May 1, 2011"}/
										%input.mini{:type => "text", :value => "12:00am"}/
										to
										%input.small{:type => "text", :value => "May 8, 2011"}/
										%input.mini{:type => "text", :value => "11:59pm"}/
										%span.help-block All times are shown as Pacific Standard Time (GMT -08:00).
							/ /clearfix
							.clearfix
								%label{:for => "textarea"} Textarea
								.input
									%textarea#textarea2.xxlarge{:name => "textarea2", :rows => "3"}
									%span.help-block
										Block of help text to describe the field above if need be.
							/ /clearfix
							.clearfix
								%label#optionsRadio List of options
								.input
									%ul.inputs-list
										%li
											%label
												%input{:checked => "", :name => "optionsRadios", :type => "radio", :value => "option1"}/
												%span Option one is this and that&mdash;be sure to include why itâ€™s great
										%li
											%label
												%input{:name => "optionsRadios", :type => "radio", :value => "option2"}/
												%span Option two is something else and selecting it will deselect option 1
							/ /clearfix
							.actions
								%input.btn.primary{:type => "submit", :value => "Save changes"}>/
								\&nbsp;
								%button.btn{:type => "reset"} Cancel
			/ /row
			%br/
			.row
				.span4
					%h2 Stacked forms
					%p
						Add
						%code .form-stacked
						to your formâ€™s HTML and youâ€™ll have labels on top of their fields instead of to their left. This works great if your forms are short or you have two columns of inputs for heavier forms.
				.span12
					%form.form-stacked{:action => ""}
						%fieldset
							%legend Example form legend
							.clearfix
								%label{:for => "xlInput3"} X-Large input
								.input
									%input#xlInput3.xlarge{:name => "xlInput3", :size => "30", :type => "text"}/
							/ /clearfix
							.clearfix
								%label{:for => "stackedSelect"} Select
								.input
									%select#stackedSelect{:name => "stackedSelect"}
										%option 1
										%option 2
										%option 3
										%option 4
										%option 5
							/ /clearfix
						%fieldset
							%legend Example form legend
							.clearfix.error
								%label{:for => "xlInput4"} X-Large input
								.input
									%input#xlInput4.xlarge.error{:name => "xlInput4", :size => "30", :type => "text"}/
									%span.help-inline Small snippet of help text
							/ /clearfix
							.clearfix
								%label#optionsCheckboxes List of options
								.input
									%ul.inputs-list
										%li
											%label
												%input{:name => "optionsCheckboxes", :type => "checkbox", :value => "option1"}/
												%span Option one is this and that&mdash;be sure to include why itâ€™s great
										%li
											%label
												%input{:name => "optionsCheckboxes", :type => "checkbox", :value => "option2"}/
												%span Option two can also be checked and included in form results
									%span.help-block
										%strong Note:
										Labels surround all the options for much larger click areas and a more usable form.
							/ /clearfix
						.actions
							%button.btn.primary{:type => "submit"}> Save changes
							\&nbsp;
							%button.btn{:type => "reset"} Cancel
			/ /row
			.row
				.span4
					%h2 Form field sizes
					%p
						Customize any form
						= succeed "," do
							%code input
						= succeed "," do
							%code select
						or
						%code textarea
						width by adding just a few classes to your markup.
					%p
						As of v1.3.0, we have added the grid-based sizing classes for form elements.
						%strong
							Please use the these over the existing
							= succeed "," do
								%code .mini
							= succeed "," do
								%code .small
							etc classes.
				.span12
					%form{:action => ""}
						.clearfix
							%input.span2{:id => "", :name => "", :placeholder => ".span2", :type => "text"}/
						.clearfix
							%input.span3{:id => "", :name => "", :placeholder => ".span3", :type => "text"}/
						.clearfix
							%input.span4{:id => "", :name => "", :placeholder => ".span4", :type => "text"}/
						.clearfix
							%input.span5{:id => "", :name => "", :placeholder => ".span5", :type => "text"}/
						.clearfix
							%input.span6{:id => "", :name => "", :placeholder => ".span6", :type => "text"}/
						.clearfix
							%input.span7{:id => "", :name => "", :placeholder => ".span7", :type => "text"}/
						.clearfix
							%input.span8{:id => "", :name => "", :placeholder => ".span8", :type => "text"}/
						.clearfix
							%input.span9{:id => "", :name => "", :placeholder => ".span9", :type => "text"}/
						.clearfix
							%input.span10{:id => "", :name => "", :placeholder => ".span10", :type => "text"}/
						.clearfix
							%input.span11{:id => "", :name => "", :placeholder => ".span11", :type => "text"}/
						.clearfix
							%input.span12{:id => "", :name => "", :placeholder => ".span12", :type => "text"}/
			.row
				.span4
					%h2 Buttons
					%p As a convention, buttons are used for actions while links are used for objects. For instance, "Download" could be a button and "recent activity" could be a link.
					%p
						All buttons default to a light gray style, but a number of functional classes can be applied for different color styles. These classes include a blue
						%code .primary
						class, a light-blue
						%code .info
						class, a green
						%code .success
						class, and a red
						%code .danger
						class.
				.span12
					%h3 Example buttons
					%p
						Button styles can be applied to anything with the
						%code .btn
						applied. Typically youâ€™ll want to apply these to only
						= succeed "," do
							%code &lt;a&gt;
						= succeed "," do
							%code &lt;button&gt;
						and select
						%code &lt;input&gt;
						elements. Hereâ€™s how it looks:
					.well{:style => "padding: 14px 19px;"}
						%button.btn.primary> Primary
						\&nbsp;
						%button.btn> Default
						\&nbsp;
						%button.btn.info> Info
						\&nbsp;
						%button.btn.success> Success
						\&nbsp;
						%button.btn.danger Danger
					%h3 Alternate sizes
					%p Fancy larger or smaller buttons? Have at it!
					.well
						%a.btn.large.primary{:href => "#"} Primary action
						%a.btn.large{:href => "#"} Action
					.well{:style => "padding: 16px 19px;"}
						%a.btn.small.primary{:href => "#"} Primary action
						%a.btn.small{:href => "#"} Action
					%h3 Disabled state
					%p
						For buttons that are not active or are disabled by the app for one reason or another, use the disabled state. Thatâ€™s
						%code .disabled
						for links and
						%code :disabled
						for
						%code &lt;button&gt;
						elements.
					%h4 Links
					.well
						%a.btn.large.primary.disabled{:href => "#"} Primary action
						%a.btn.large.disabled{:href => "#"} Action
					%h4 Buttons
					.well
						%button.btn.large.primary.disabled{:disabled => "disabled"}> Primary action
						\&nbsp;
						%button.btn.large{:disabled => ""} Action
			/ /row
			/
				Navigation
				\==================================================
			%section#navigation
			.page-header
				%h1 Navigation
			%h2 Fixed topbar
			.topbar-wrapper{:style => "z-index: 5;"}
				.topbar{"data-dropdown" => "dropdown"}
					.topbar-inner
						.container
							%h3
								%a{:href => "#"} Project Name
							%ul.nav
								%li.active
									%a{:href => "#"} Home
								%li
									%a{:href => "#"} Link
								%li
									%a{:href => "#"} Link
								%li
									%a{:href => "#"} Link
								%li.dropdown
									%a.dropdown-toggle{:href => "#"} Dropdown
									%ul.dropdown-menu
										%li
											%a{:href => "#"} Secondary link
										%li
											%a{:href => "#"} Something else here
										%li.divider
										%li
											%a{:href => "#"} Another link
							%form.pull-left{:action => ""}
								%input{:placeholder => "Search", :type => "text"}/
							%ul.nav.secondary-nav
								%li.dropdown
									%a.dropdown-toggle{:href => "#"} Dropdown
									%ul.dropdown-menu
										%li
											%a{:href => "#"} Secondary link
										%li
											%a{:href => "#"} Something else here
										%li.divider
										%li
											%a{:href => "#"} Another link
					/ /topbar-inner
				/ /topbar
			/ /topbar-wrapper
			.row
				.span5
					%h4 What is it
					%p Our topbar is a fixed bar that houses a websiteâ€™s logo or name, primary navigation, and search form.
				.span5
					%h4 Customizable
					%p All elements within, and the entire topbar as well, are optional. You can choose to include a logo/name, nav, search, and a secondary nav&mdash;or any combination of that.
				.span6
					%h4 Dropdowns included
					%p
						As part of the main navigation, weâ€™ve included the ability for you to add dropdowns to your nav. Check out the secondary nav above (right aligned) to see how itâ€™s done. Dropdowns
						%code li
						tags also support
						%code .active
						for showing current page selection.
			%p
				%strong Note:
				When using the topbar on any page, be sure to account for the overlap it causes by adding
				%code padding-top: 40px;
				to your
				= succeed "." do
					%code body
			%br/
			.row
				.span4
					%h2 Tabs and pills
					%p
						Create simple secondary navigation with a
						= succeed "." do
							%code &lt;ul&gt;
						Swap between tabs or pills by adding the appropriate class.
					%p Great for sub-sections of content like our account settings pages and user timelines for toggling between pages of like content. Available in tabbed or pill styles.
				.span12
					%h3 Basic tabs example
					%p
						Tabs can be used as regular navigation (loading external pages in the same tab) or as tabbable content areas for swapping out panes of content. We have a
						%a{:href => "./javascript.html#tabs"} tabs plugin
						that can be used to integrate the latter.
					%ul.tabs
						%li.active
							%a{:href => "#"} Home
						%li
							%a{:href => "#"} Profile
						%li
							%a{:href => "#"} Messages
						%li
							%a{:href => "#"} Settings
						%li
							%a{:href => "#"} Contact
						%li.dropdown{"data-dropdown" => "dropdown"}
							%a.dropdown-toggle{:href => "#"} Dropdown
							%ul.dropdown-menu
								%li
									%a{:href => "#"} Secondary link
								%li
									%a{:href => "#"} Something else here
								%li.divider
								%li
									%a{:href => "#"} Another link
					%h3 Basic pills example
					%ul.pills
						%li.active
							%a{:href => "#"} Home
						%li
							%a{:href => "#"} Profile
						%li
							%a{:href => "#"} Messages
						%li
							%a{:href => "#"} Settings
						%li
							%a{:href => "#"} Contact
			/ /row
			/ Breadcrumbs
			.row
				.span4
					%h2 Breadcrumbs
					%p Breadcrumb navigation is used as a way to show users where they are within an app or a site, but not for primary navigation.
				.span12
					%ul.breadcrumb
						%li.active Home
					%ul.breadcrumb
						%li
							%a{:href => "#"} Home
							%span.divider /
						%li.active Middle page
					%ul.breadcrumb
						%li
							%a{:href => "#"} Home
							%span.divider /
						%li
							%a{:href => "#"} Middle page
							%span.divider /
						%li.active Another one
					%ul.breadcrumb
						%li
							%a{:href => "#"} Home
							%span.divider /
						%li
							%a{:href => "#"} Middle page
							%span.divider /
						%li
							%a{:href => "#"} Another one
							%span.divider /
						%li.active You are here
			/ Pagination
			.row
				.span4
					%h2 Pagination
					%p Ultra simplistic and minimally styled pagination inspired by Rdio. The large block is hard to miss, easily scalable, and provides large click areas.
				.span12
					.pagination
						%ul
							%li.prev.disabled
								%a{:href => "#"} &larr; Previous
							%li.active
								%a{:href => "#"} 1
							%li
								%a{:href => "#"} 2
							%li
								%a{:href => "#"} 3
							%li
								%a{:href => "#"} 4
							%li
								%a{:href => "#"} 5
							%li.next
								%a{:href => "#"} Next &rarr;
					.pagination
						%ul
							%li.prev
								%a{:href => "#"} &larr; Previous
							%li.active
								%a{:href => "#"} 10
							%li
								%a{:href => "#"} 11
							%li
								%a{:href => "#"} 12
							%li.disabled
								%a{:href => "#"} â€¦
							%li
								%a{:href => "#"} 19
							%li
								%a{:href => "#"} 20
							%li
								%a{:href => "#"} 21
							%li.next
								%a{:href => "#"} Next &rarr;
					.pagination
						%ul
							%li.prev
								%a{:href => "#"} &larr; Previous
							%li
								%a{:href => "#"} 10
							%li
								%a{:href => "#"} 11
							%li
								%a{:href => "#"} 12
							%li
								%a{:href => "#"} 13
							%li
								%a{:href => "#"} 14
							%li.active
								%a{:href => "#"} 15
							%li
								%a{:href => "#"} 16
							%li
								%a{:href => "#"} 17
							%li
								%a{:href => "#"} 18
							%li
								%a{:href => "#"} 19
							%li
								%a{:href => "#"} 20
							%li.next
								%a{:href => "#"} Next &rarr;
			/ /row
			/
				Alerts &amp; Messages
				\==================================================
			%section#alerts
			.page-header
				%h1
					Alerts &amp; Errors
					%small Styles for success, warning, error, and info messages
			/ Basic alert messages
			.row
				.span4
					%h2 Basic alerts
					%p
						%code .alert-message
					%p One-line messages for highlighting the failure, possible failure, or success of an action. Particularly useful for forms.
					%p
						%a.btn.js-btn{:href => "./javascript.html#alerts"} Get the javascript &raquo;
				.span12
					.alert-message.warning
						%a.close{:href => "#"} &times;
						%p
							%strong Holy guacamole!
							Best check yo self, youâ€™re not
							= succeed "." do
								%a{:href => "#"} looking too good
					.alert-message.error
						%a.close{:href => "#"} &times;
						%p
							%strong Oh snap!
							Change this and that and
							= succeed "." do
								%a{:href => "#"} try again
					.alert-message.success
						%a.close{:href => "#"} &times;
						%p
							%strong Well done!
							You successfully
							%a{:href => "#"} read this
							alert message.
					.alert-message.info
						%a.close{:href => "#"} &times;
						%p
							%strong Heads up!
							This is an alert that needs your attention, but itâ€™s not
							%a{:href => "#"} a huge priority
							just yet.
					%h4 Example code
			/ /row
			/ Block messages
			.row
				.span4
					%h2 Block messages
					%p
						%code .alert-message.block-message
					%p For messages that require a bit of explanation, we have paragraph style alerts. These are perfect for bubbling up longer error messages, warning a user of a pending action, or just presenting information for more emphasis on the page.
					%p
						%a.btn.js-btn{:href => "./javascript.html#alerts"} Get the javascript &raquo;
				.span12
					.alert-message.block-message.warning
						%a.close{:href => "#"} &times;
						%p
							%strong Holy guacamole! This is a warning!
							Best check yo self, youâ€™re not looking too good. Nulla vitae elit libero, a pharetra augue. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.
						.alert-actions
							%a.btn.small{:href => "#"} Take this action
							%a.btn.small{:href => "#"} Or do this
					.alert-message.block-message.error
						%a.close{:href => "#"} &times;
						%p
							%strong Oh snap! You got an error!
							Change this and that and
							= succeed "." do
								%a{:href => "#"} try again
						%ul
							%li Duis mollis est non commodo luctus
							%li Nisi erat porttitor ligula
							%li Eget lacinia odio sem nec elit
						.alert-actions
							%a.btn.small{:href => "#"} Take this action
							%a.btn.small{:href => "#"} Or do this
					.alert-message.block-message.success
						%a.close{:href => "#"} &times;
						%p
							%strong Well done!
							You successfully read this alert message. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Maecenas faucibus mollis interdum.
						.alert-actions
							%a.btn.small{:href => "#"} Take this action
							%a.btn.small{:href => "#"} Or do this
					.alert-message.block-message.info
						%a.close{:href => "#"} &times;
						%p
							%strong Heads up!
							This is an alert that needs your attention, but itâ€™s not a huge priority just yet.
						.alert-actions
							%a.btn.small{:href => "#"} Take this action
							%a.btn.small{:href => "#"} Or do this
					%h4 Example code
			/ /row
			/
				Popovers
				\==================================================
			%section#popovers
			.page-header
				%h1
					Popovers
					%small Components for displaying content in modals, tooltips, and popovers
			.row
				.span4
					%h2 Modals
					%p Modals&mdash;dialogs or lightboxes&mdash;are great for contextual actions in situations where itâ€™s important that the background context be maintained.
					%p
						%a.btn.js-btn{:href => "./javascript.html#modal"} Get the javascript &raquo;
				.span12
					.well{:style => "background-color: #888; border: none; padding: 40px;"}
						/ Modal
						.modal{:style => "position: relative; top: auto; left: auto; margin: 0 auto; z-index: 1"}
							.modal-header
								%a.close{:href => "#"} &times;
								%h3 Modal Heading
							.modal-body
								%p One fine bodyâ€¦
							.modal-footer
								%a.btn.primary{:href => "#"} Primary
								%a.btn.secondary{:href => "#"} Secondary
			/ /row
			/ Tooltips
			.row
				.span4
					%h2 Tooltips
					%p Twipsies are super useful for aiding a confused user and pointing them in the right direction.
					%p
						%a.btn.js-btn{:href => "./javascript.html#twipsy"} Get the javascript &raquo;
				.span12
					.twipsies.well
						%div{:style => "position: relative"}
							%p.muted{:style => "margin-bottom: 0"}
								Lorem ipsum dolar sit amet illo error
								%a{:href => "#", :title => "below"} ipsum
								veritatis aut iste perspiciatis iste voluptas natus illo quasi odit aut natus consequuntur consequuntur, aut natus illo voluptatem odit perspiciatis laudantium rem doloremque totam voluptas.
								%a{:href => "#", :title => "right"} Voluptasdicta
								eaque beatae aperiam ut enim voluptatem explicabo explicabo, voluptas quia odit fugit accusantium totam totam architecto explicabo sit quasi fugit fugit, totam doloremque unde sunt
								%a{:href => "#", :title => "left"} sed
								dicta quae accusantium fugit voluptas nemo voluptas voluptatem
								%a{:href => "#", :title => "above"} rem
								quae aut veritatis quasi quae.
			/ /row
			/ Popovers
			.row
				.span4
					%h2 Popovers
					%p Use popovers to provide subtextual information to a page without affecting layout.
					%p
						%a.btn.js-btn{:href => "./javascript.html#popover"} Get the javascript &raquo;
				.span12
					.well.popover-well
						.popover-wrapper
							.popover.left
								.arrow
								.inner
									%h3.title Popover Title
									.content
										%p Etiam porta sem malesuada magna mollis euismod. Maecenas faucibus mollis interdum. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.
							%img.large-bird{:src => "assets/img/bird.png"}/
			/ /row
			/
				Using Javascript w/ Bootstrap
				\==================================================
			%section#javascript
			.page-header
				%h1
					Using javascript with Bootstrap
					%small An index of plugins to get you started
			.row
				.span4
					%h2 Getting started
					%p Integrating javascript with the Bootstrap library is super easy. Below we go over the basics and provide you with some awesome plugins to get you started!
					%p
						%a.btn.primary{:href => "./javascript.html"} View javascript docs &raquo;
				.span12
					%h3 What's included
					%p
						Bring some of Bootstrap's primary components to life with new custom plugins that work with
						%a{:href => "http://jquery.com/", :target => "_blank"} jQuery
						and
						= succeed "." do
							%a{:href => "http://ender.no.de", :target => "_blank"} Ender
						We encourage you to extend and modify them to fit your specific development needs.
					%table.bordered-table.zebra-striped
						%thead
							%tr
								%th{:style => "width: 150px;"} File
								%th Description
						%tbody
							%tr
								%td
									%a{:href => "./javascript.html#modal"} bootstrap-modal.js
								%td
									Our Modal plugin is a
									%strong super
									slim take on the traditional modal js plugin! We took special care to include only the bare functionality that we require at twitter.
							%tr
								%td
									%a{:href => "./javascript.html#alerts"} bootstrap-alerts.js
								%td The alert plugin is a super tiny class for adding close functionality to alerts.
							%tr
								%td
									%a{:href => "./javascript.html#dropdown"} bootstrap-dropdown.js
								%td This plugin is for adding dropdown interaction to the bootstrap topbar or tabbed navigations.
							%tr
								%td
									%a{:href => "./javascript.html#scrollspy"} bootstrap-scrollspy.js
								%td The ScrollSpy plugin is for adding an auto updating nav based on scroll position to the bootstrap topbar.
							%tr
								%td
									%a{:href => "./javascript.html#buttons"} bootstrap-buttons.js
								%td This plugin offers additional functionality for managing button state.
							%tr
								%td
									%a{:href => "./javascript.html#tabs"} bootstrap-tabs.js
								%td This plugin adds quick, dynamic tab and pill functionality for cycling through local content.
							%tr
								%td
									%a{:href => "./javascript.html#twipsy"} bootstrap-twipsy.js
								%td Based on the excellent jQuery.tipsy plugin written by Jason Frame; twipsy is an updated version, which doesn't rely on images, uses css3 for animations, and data-attributes for local title storage!
							%tr
								%td
									%a{:href => "./javascript.html#popover"} bootstrap-popover.js
								%td
									The popover plugin provides a simple interface for adding popovers to your application. It extends the
									%a{:href => "#twipsy"} boostrap-twipsy.js
									plugin, so be sure to grab that file as well when including popovers in your project!
					%h3 Is javascript necessary?
					%p
						%strong Nope!
						Bootstrap is designed first and foremost to be a CSS library. This javascript provides a basic interactive layer on top of the included styles.
					%p However, for those who do need javascript, we've provided the plugins above to help you understand how to integrate Bootstrap with javascript and to give you a quick, lightweight option for the basic functionality right away.
					%p
						For more information and to see some live demos, please refer to our
						= succeed "." do
							%a{:href => "./javascript.html"} plugin documentation page
		/ /container
		%footer.footer
		.container
			%p.pull-right
				%a{:href => "#"} Back to top
			%p
				Designed and built with all the love in the world
				%a{:href => "http://twitter.com/twitter", :target => "_blank"} @twitter
				by
				%a{:href => "http://twitter.com/mdo", :target => "_blank"} @mdo
				and
				= succeed "." do
					%a{:href => "http://twitter.com/fat", :target => "_blank"} @fat
				%br/
				Code licensed under the
				= succeed "." do
					%a{:href => "http://www.apache.org/licenses/LICENSE-2.0", :target => "_blank"} Apache License v2.0
				Documentation licensed under
				= succeed "." do
					%a{:href => "http://creativecommons.org/licenses/by/3.0/"} CC BY 3.0
		/ Le javascript
		/ %script{:src => "http://code.jquery.com/jquery-1.7.min.js"}
		/ %script{:src => "http://autobahn.tablesorter.com/jquery.tablesorter.min.js"}
		/ %script{:src => "assets/js/google-code-prettify/prettify.js"}
		/ :javascript
		/ 	$(function () { prettyPrint() })		%script{:src => "../js/bootstrap-dropdown.js"}
		/ %script{:src => "../js/bootstrap-twipsy.js"}
		/ %script{:src => "../js/bootstrap-scrollspy.js"}
		/ %script{:src => "assets/js/application.js"}
